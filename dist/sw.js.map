{"version":3,"sources":["sw.js"],"names":["self","addEventListener","event","waitUntil","precache","request","method","respondWith","cachedResponse","updateCache","cache","caches","open","addAll","response","match","fetch","status","put","Promise","resolve","reject"],"mappings":"AAAAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCC,KAAK,IAAI;AACtCA,EAAAA,KAAK,CAACC,SAAN,CAAgBC,QAAQ,EAAxB;AACH,CAFD;AAIAJ,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAA+BC,KAAK,IAAI;AACpC,QAAMG,OAAO,GAAGH,KAAK,CAACG,OAAtB,CADoC,CAEpC;;AACA,MAAGA,OAAO,CAACC,MAAR,IAAkB,KAArB,EAA4B;AACxB;AACH,GALmC,CAMpC;;;AACAJ,EAAAA,KAAK,CAACK,WAAN,CAAkBC,cAAc,CAACH,OAAD,CAAhC,EAPoC,CASpC;;AACAH,EAAAA,KAAK,CAACC,SAAN,CAAgBM,WAAW,CAACJ,OAAD,CAA3B;AACH,CAXD;;AAaA,eAAeD,QAAf,GAA0B;AACtB,QAAMM,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAY,SAAZ,CAApB;AACA,SAAOF,KAAK,CAACG,MAAN,CAAa;AAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AARwB,GAAb,CAAP;AAUH;;AAED,eAAeL,cAAf,CAA+BH,OAA/B,EAAwC;AACpC,QAAMK,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAY,SAAZ,CAApB;AACA,QAAME,QAAQ,GAAG,MAAMJ,KAAK,CAACK,KAAN,CAAYV,OAAZ,CAAvB;AACA,SAAOS,QAAQ,IAAIE,KAAK,CAACX,OAAD,CAAxB;AACH,EAED;;;AACA,eAAeI,WAAf,CAA2BJ,OAA3B,EAAoC;AAChC,QAAMK,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAY,SAAZ,CAApB;AACA,QAAME,QAAQ,GAAG,MAAME,KAAK,CAACX,OAAD,CAA5B,CAFgC,CAGhC;AACA;;AACA,SAAOS,QAAQ,CAACG,MAAT,KAAoB,GAApB,GACDP,KAAK,CAACQ,GAAN,CAAUb,OAAV,EAAmBS,QAAnB,CADC,GAED,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBD,OAAO,CAAC,IAAD,CAAxC,CAFN;AAGH","file":"sw.js","sourceRoot":"..","sourcesContent":["self.addEventListener('install', event => {\n    event.waitUntil(precache());\n});\n\nself.addEventListener('fetch', event => {\n    const request = event.request;\n    //get\n    if(request.method != \"GET\") {\n        return;\n    }\n    // buscar cache\n    event.respondWith(cachedResponse(request));\n\n    //Actualizar cache\n    event.waitUntil(updateCache(request));\n})\n\nasync function precache() {\n    const cache = await caches.open('VERSION');\n    return cache.addAll([\n        /* '/',\n        '/index.html',\n        '/index.js',\n        '/MediaPlayer.js',\n        '/plugins/AutoPlay.js',\n        '/plugins/AutoPause.ts',\n        '/assets/style.css',\n        '/assets/rain.mp4', */\n    ]);\n}\n\nasync function cachedResponse (request) {\n    const cache = await caches.open('VERSION')\n    const response = await cache.match(request)\n    return response || fetch(request);\n}\n\n// It updates the cache given a request\nasync function updateCache(request) {\n    const cache = await caches.open('VERSION');\n    const response = await fetch(request);\n    // Cache.put when status code is 200 \n    // Otherwise return a simple promise \n    return response.status === 200 \n        ? cache.put(request, response) \n        : new Promise((resolve, reject) => resolve(':D'));    \n}"]}